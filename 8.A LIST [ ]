LIST []

an ORDERED container can DUPLICATEM created using square brackets "[ ]"
objects are inputs in square brackets and separated by " , "

faveSong = ["In", "Bloom", "Neck Deep"]
print(faveSong)

and can contained mixed data types.

x = ["dog", 21, True]
print(x)

////////////////////
INDEXING
////////////////////

used to access the items of a list
uses square brackets and numbers to access individual items of a list

when 0 is the first item and 1 refers to the second item and so on.

pets = ['dog', 'cat', 'fish']
print(pets[0])
print(pets[1])
print(pets[2])

////////////////////
NEGATIVE INDEXING
////////////////////

where -1 refers to the last item, -2 second to the last item, and so on.

pets = ['dog', 'cat', 'fish']
print(pets[-1])
print(pets[-2])
print(pets[-3])

////////////////////
RANGE OF INDEXES
////////////////////

By using a colon ":" we can access a range of items at once

pets = ['dog', 'cat', 'fish', 'bird', 'hamster']
x = pets[1:3]
print(x) #. ['cat', 'fish']

if you don't specify the first index the range starts from index 0

pets = ['dog', 'cat', 'fish', 'bird', 'hamster']
x = pets[:2]
print(x) #. ['dog', 'cat']

if you don't specify the last index, the range ends with the last item of the list
in this case, the range includes the last item

pets = ['dog', 'cat', 'fish', 'bird', 'hamster']
x = pets[2:]
print(x) #. ['fish', 'bird', 'hamster']

#. [start:end] - in end slicing the specific number will disregard.

//////////////////////////////
ADDING ITEMS TO A LIST
//////////////////////////////

the append() method adds an item to the end of the list
in this example, we will insert "rabbit" to index 0 and "hamster" to index 2

pets = ['dog', 'cat', 'fish']
pets.insert(0, "rabbit")
pets.insert(2, "hamster")

print(pets) # ['rabbit', 'dog', 'hamster', 'cat', 'fish']

//////////////////////////////
DELETING ITEMS FROM A LIST
//////////////////////////////

pop() - it will raise an error if you specified the value. this removed the last item
item() - it will raise an error if you don't specified the value.

*The pop() method removes the last item from a list*

pets = ['dog', 'cat', 'fish']
pets.pop()
print(pets) # ['dog', 'cat']

*The remove() method removes the specified item value*

pets = ['dog', 'cat', 'fish']
pets.remove("cat")
print(pets) # ['dog', 'fish']

*To delete a specified index, use the del keyword.*

pets = ['dog', 'cat', 'fish']
del pets[2]
print(pets) # ['dog', 'cat']

//////////////////////////////
GETTING A LENGTH OF A LIST
//////////////////////////////

*len() method*

pets = ['dog', 'cat', 'fish']
print(len(pets)) #3

**CHANGING AN ITEM'S VALUE**
To change an item's value, access the index first and use the assignment operator

pets = ['dog', 'cat', 'fish']
pets[2] = 'rabbit' # you can not directed as print(pets[2])
print(pets) # ['dog', 'cat', 'rabbit']

**CHECKING IF AN ITEMS EXISTS**
using **IN operator**
it returns True if the item is found, otherwise returns False

pets = ['dog', 'cat', 'fish']
print("dog" in pets) # TRUE
print("python" in pets) # FALSE

**EXTENDING A LIST**
the extend() method adds all items from a list to another list

nums1 = [1,2,3]
nums2 = [4,5,6]
nums1.extend(nums2) # if you put variable on it the result will be none

print(nums1)

print(nums2.count("1")) #it determines if there's a word and how many words in it.

**LOOPING THROUGH A LIST**
Looping through a list basically means accessing all its items one-by-one

The for loop is used to loop through  a list

pets = ['dog', 'cat', 'fish']
for rye in pets:
	print(rye)

**ANOTHER WAY TO CREATE LIST**

The way we created our lists above is called literal.
another way to create a list is to use the list() constructor

pets = list(('dog', 'cat', 'fish'))
print(pets)

**SORTING**

my_list = [1024, 56, 888, 513]

my_list.sort() # arrange those list arg SMALLEST TO BIGGEST
print(my_list)
my_list.reverse() # reverse sort BIGGEST to SMALLEST
print(my_list)

print(min(my_list)) # it shows least value
print(max(my_list)) # it shows highest value

print(sum(my_list)) # it adds all the int value

**NOTE: don't direct it as print(my_list.sort) because it turns an error**

**MATRIX**

matrix = [[1,2,3],  # 0
               [4,5,6],   # 1
               [7,8,9]]   # 2
             # 0 1 2

print(matrix[2][0])
print(matrix[1][2])
print(matrix [0][0]

**NOTE: The term ITEMS ca also be reffered to as ELEMENTS**
