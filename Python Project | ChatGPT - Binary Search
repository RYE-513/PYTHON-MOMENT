def binary_search(arr, x):

    low = 0

    high = len(arr) - 1

    mid = 0

 

    while low <= high:

 

        mid = (high + low) // 2

 

        if arr[mid] < x:

            low = mid + 1

 

        elif arr[mid] > x:

            high = mid - 1

 

        else:

            return mid



    return -1

# Example usage:

arr = [2, 3, 4, 10, 40]

x = 10

 

result = binary_search(arr, x)

 

if result != -1:

    print("Element is present at index", str(result))

else:

    print("Element is not present in array")




This code defines a function called binary_search that takes an array of sorted integers (arr) and a target value (x) as input. The function uses a while loop to repeatedly divide the search interval in half until the target value is found, or until the search interval becomes empty (indicating that the target value is not present in the array).

If the middle element of the search interval is less than the target value, the search interval is shifted to the right half of the array. If the middle element is greater than the target value, the search interval is shifted to the left half of the array. If the middle element is equal to the target value, the function returns the index of the middle element.

In the example usage, we create an array arr and a target value x, and call the binary_search function with these values. The function returns the index of the target value in the array (if it is present), or -1 if the target value is not in the array. Finally, we print out a message indicating whether the target value was found or not.
